name: Déploiement API Catways

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Récupération du code source
        uses: actions/checkout@v3

      - name: Configuration de Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'

      - name: Installation des dépendances
        run: npm install

      - name: Configuration des variables d'environnement
        run: |
          echo "DB_URI=${{ secrets.URL_MONGO }}" >> $GITHUB_ENV
          echo "PORT=8080" >> $GITHUB_ENV
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> $GITHUB_ENV
          echo "NODE_ENV=production" >> $GITHUB_ENV

      - name: Vérification des variables d'environnement 
        run: |
          echo "Vérification des variables d'environnement..."
          echo "DB_URI=$DB_URI"
          echo "SECRET_KEY=$SECRET_KEY"
          echo "PORT=$PORT"

      - name: Lancement manuel du serveur pour debug
        run: |
          echo "Lancement manuel de l'API pour voir les erreurs..."
          node server.js || exit 1

      - name: Lancement de l'API en arrière-plan
        run: |
          echo "Démarrage de l'API avec nohup..."
          nohup env DB_URI=$DB_URI SECRET_KEY=$SECRET_KEY PORT=8080 NODE_ENV=production node server.js > nohup.out 2>&1 &
          sleep 15
          
          echo "Affichage des processus Node.js actifs..."
          ps aux | grep node

          echo "Vérification du démarrage de l'API..."
          cat nohup.out || echo "Aucun log disponible"

          for i in {1..10}; do
            if curl -s http://localhost:8080/catways; then
              echo "L'API est bien démarrée !"
              exit 0
            fi
            echo "Tentative $i/10 : L'API n'est pas encore prête..."
            sleep 3
          done

          echo "L'API ne répond toujours pas après plusieurs tentatives !"
          cat nohup.out
          exit 1

      - name: Vérification des fichiers créés
        run: |
          ls -la

      - name: Vérification des logs de l'API
        run: |
          sleep 5
          echo "Logs récents de l'API :"
          tail -n 50 nohup.out || echo "Aucun log trouvé."

      - name: Vérification du serveur
        run: |
          echo "Attente du démarrage de l'API..."
          for i in {1..10}; do
            if curl -s http://localhost:8080/catways; then
              echo "L'API est bien démarrée !"
              exit 0
            fi
            echo "Tentative $i/10 : L'API n'est pas encore prête..."
            sleep 3
          done
          echo "L'API ne répond toujours pas après 30 secondes !"
          tail -n 50 nohup.out
          exit 1

      - name: Récupération du Token d'authentification pour les tests
        run: |
          echo "Tentative d'authentification..."
          TOKEN=$(curl -s -X POST "http://localhost:8080/auth/login" \
          -H "Content-Type: application/json" \
          -d "{\"email\": \"${{ secrets.EMAIL_ADMIN }}\", \"password\": \"${{ secrets.PASSWORD_ADMIN }}\"}" | jq -r .token)

          if [[ -z "$TOKEN" || "$TOKEN" == "null" ]]; then
            echo "Échec de l'authentification !"
            curl -s -X POST "http://localhost:8080/auth/login" -H "Content-Type: application/json" -d "{\"email\": \"${{ secrets.EMAIL_ADMIN }}\", \"password\": \"${{ secrets.PASSWORD_ADMIN }}\"}"
            exit 1
          fi
          
          echo "TOKEN=$TOKEN" >> $GITHUB_ENV
          echo "Token récupéré avec succès"

      - name: Exécution des tests avec Mocha
        run: |
          cd api/mocha_test
          npm test
        env:
          JWT_SECRET: ${{ secrets.SECRET_KEY }}
          DB_URI: ${{ secrets.URL_MONGO }}
          TOKEN: ${{ env.TOKEN }}

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest

    steps:
      - name: Récupération du code source
        uses: actions/checkout@v3

      - name: Déploiement sur le serveur
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            cd api
            git pull origin main
            npm install
            sleep 5
            pm2 restart api
