name: D√©ploiement API Catways

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: R√©cup√©ration du code source
        uses: actions/checkout@v3

      - name: Configuration de Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'

      - name: Installation des d√©pendances
        run: npm install

      - name: Configuration des variables d'environnement
        run: |
          mkdir -p env
          echo "DB_URI=${{ secrets.URL_MONGO }}" > env/.env
          echo "PORT=8080" >> env/.env
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> env/.env
          echo "NODE_ENV=production" >> env/.env

      - name: V√©rification des variables d'environnement 
        run: cat env/.env

      - name: Test de connexion √† MongoDB
        run: |
          echo "üõ† Test de connexion √† MongoDB..."
          mongo --eval "db.runCommand({ ping: 1 })" $DB_URI || echo "‚ùå √âchec de la connexion √† MongoDB"

      - name: Ex√©cution manuelle pour debug
        run: |
          echo "üöÄ Lancement manuel de l'API pour voir les erreurs..."
          node server.js 2>&1 | tee server-error.log || exit 1
          echo "üìú Affichage des logs d'erreur :"
          cat server-error.log || echo "‚ùå Aucun log trouv√©"

      - name: V√©rification du port 8080
        run: |
          echo "üõ† V√©rification du port 8080..."
          sudo lsof -i :8080 || echo "‚ùå Le port 8080 n'est pas utilis√©"

      - name: Lancement de l'API en arri√®re-plan
        run: |
          echo "üöÄ D√©marrage de l'API avec nohup..."
          nohup npm start > nohup.out 2>&1 &
          sleep 15

          echo "üì° V√©rification du d√©marrage de l'API..."
          tail -n 50 nohup.out || echo "‚ùå Aucun log disponible"

          for i in {1..10}; do
            if curl -s http://localhost:8080/catways; then
              echo "‚úÖ L'API est bien d√©marr√©e"
              exit 0
            fi
            echo "‚è≥ Tentative $i/10 : L'API n'est pas encore pr√™te"
            sleep 3
          done

          echo "‚ùå L'API ne r√©pond toujours pas apr√®s plusieurs tentatives"
          tail -n 50 nohup.out
          exit 1

      - name: V√©rification des fichiers cr√©√©s
        run: ls -R

      - name: V√©rification des logs de l'API
        run: tail -n 50 nohup.out || echo "‚ùå Aucun log trouv√©."

      - name: V√©rification du serveur
        run: |
          echo "üîé V√©rification du serveur..."
          curl -s http://localhost:8080 || echo "‚ùå Le serveur n'a pas r√©pondu"

      - name: R√©cup√©ration du Token d'authentification pour les tests
        run: |
          echo "üîë Tentative d'authentification..."
          TOKEN=$(curl -s -X POST "http://localhost:8080/auth/login" \
          -H "Content-Type: application/json" \
          -d "{\"email\": \"${{ secrets.EMAIL_ADMIN }}\", \"password\": \"${{ secrets.PASSWORD_ADMIN }}\"}" | jq -r .token)

          if [[ -z "$TOKEN" || "$TOKEN" == "null" ]]; then
            echo "‚ùå √âchec de l'authentification"
            curl -s -X POST "http://localhost:8080/auth/login" -H "Content-Type: application/json" -d "{\"email\": \"${{ secrets.EMAIL_ADMIN }}\", \"password\": \"${{ secrets.PASSWORD_ADMIN }}\"}"
            exit 1
          fi
          
          echo "TOKEN=$TOKEN" >> $GITHUB_ENV
          echo "‚úÖ Token r√©cup√©r√© avec succ√®s"

      - name: Ex√©cution des tests avec Mocha
        run: |
          cd api/mocha_test
          npm test
        env:
          JWT_SECRET: ${{ secrets.SECRET_KEY }}
          DB_URI: ${{ secrets.URL_MONGO }}
          TOKEN: ${{ env.TOKEN }}

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest

    steps:
      - name: R√©cup√©ration du code source
        uses: actions/checkout@v3

      - name: D√©ploiement sur le serveur
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            cd api
            git pull origin main
            npm install
            sleep 5
            pm2 restart api
