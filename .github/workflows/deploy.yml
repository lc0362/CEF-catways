name: D√©ploiement API Catways

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: R√©cup√©ration du code source
        uses: actions/checkout@v3

      - name: Configuration de Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'

      - name: Installation des d√©pendances
        run: npm install

      - name: Installation de MongoDB Shell
        run: |
          sudo apt update
          sudo apt install -y mongodb-clients
      

      - name: Configuration des variables d'environnement
        run: |
          echo "DB_URI=${{ secrets.URL_MONGO }}" >> $GITHUB_ENV
          echo "PORT=8080" >> $GITHUB_ENV
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> $GITHUB_ENV
          echo "NODE_ENV=production" >> $GITHUB_ENV

      - name: V√©rification des variables d'environnement 
        run: |
          echo "V√©rification des variables d'environnement..."
          env | grep -E 'DB_URI|PORT|SECRET_KEY|NODE_ENV'

      - name: Test de connexion √† MongoDB
        run: |
            echo "üõ† Test de connexion √† MongoDB..."
            if echo "$DB_URI" | grep -q "mongodb+srv"; then
              echo "‚ö†Ô∏è Connexion SRV d√©tect√©e, le test simple est ignor√©."
            else
              MONGO_HOST=$(echo "$DB_URI" | sed -E 's|mongodb://([^/]+).*|\1|')
              if ! nc -z $MONGO_HOST 27017; then
                echo "‚ùå MongoDB n'est pas accessible !"
                exit 1
              fi
            fi
            echo "‚úÖ MongoDB semble accessible."

      - name: Test de connexion √† MongoDB avec mongosh
        run: |
          echo "üîç Test de connexion MongoDB via mongosh..."
          if ! echo "db.runCommand({ ping: 1 })" | mongosh "$DB_URI" --quiet; then
            echo "‚ùå Impossible de se connecter √† MongoDB via mongosh"
            exit 1
          fi
          echo "‚úÖ Connexion MongoDB r√©ussie via mongosh."

      - name: Logs MongoDB apr√®s test
        run: |
            echo "üìú Logs r√©cents de MongoDB (s'il y en a) :"
            cat /var/log/mongodb/mongod.log || echo "‚ùå Aucun log MongoDB trouv√©"
        

      - name: V√©rification du port 8080 avant lancement
        run: |
          echo "üì° V√©rification du port 8080..."
          netstat -tulnp | grep 8080 || echo "‚ö†Ô∏è Le port 8080 n'est pas utilis√© avant lancement"

      - name: Ex√©cution manuelle en mode debug
        run: |
          echo "üöÄ Lancement manuel de l'API avec logs d√©taill√©s..."
          node server.js 2>&1 | tee server-debug.log || exit 1
          echo "üìú Affichage des logs de debug :"
          cat server-debug.log || echo "‚ùå Aucun log trouv√©"

      - name: Lancement de l'API en arri√®re-plan
        run: |
          echo "üöÄ D√©marrage de l'API avec nohup..."
          nohup npm start > nohup.out 2>&1 &
          sleep 15

          echo "üì° V√©rification du d√©marrage de l'API..."
          tail -n 50 nohup.out || echo "‚ùå Aucun log disponible"

          for i in {1..10}; do
            if curl -s http://localhost:8080/catways; then
              echo "‚úÖ L'API est bien d√©marr√©e"
              exit 0
            fi
            echo "‚è≥ Tentative $i/10 : L'API n'est pas encore pr√™te"
            sleep 3
          done

          echo "‚ùå L'API ne r√©pond toujours pas apr√®s plusieurs tentatives"
          tail -n 50 nohup.out
          exit 1

      - name: V√©rification du port 8080 apr√®s lancement
        run: |
          echo "üì° V√©rification du port 8080 apr√®s lancement..."
          netstat -tulnp | grep 8080 || echo "‚ö†Ô∏è Le port 8080 n'est toujours pas utilis√© apr√®s lancement"

      - name: V√©rification des fichiers cr√©√©s
        run: ls -la

      - name: V√©rification des logs de l'API
        run: |
          sleep 5
          echo "üìú Logs r√©cents de l'API :"
          tail -n 50 nohup.out || echo "‚ùå Aucun log trouv√©."

      - name: V√©rification du serveur
        run: |
          echo "‚è≥ Attente du d√©marrage de l'API..."
          for i in {1..10}; do
            if curl -s http://localhost:8080/catways; then
              echo "‚úÖ L'API est bien d√©marr√©e"
              exit 0
            fi
            echo "‚è≥ Tentative $i/10 : L'API n'est pas encore pr√™te"
            sleep 3
          done
          echo "‚ùå L'API ne r√©pond toujours pas apr√®s 30 secondes"
          tail -n 50 nohup.out
          exit 1

      - name: R√©cup√©ration du Token d'authentification pour les tests
        run: |
          echo "üîë Tentative d'authentification..."
          TOKEN=$(curl -s -X POST "http://localhost:8080/auth/login" \
          -H "Content-Type: application/json" \
          -d "{\"email\": \"${{ secrets.EMAIL_ADMIN }}\", \"password\": \"${{ secrets.PASSWORD_ADMIN }}\"}" | jq -r .token)

          if [[ -z "$TOKEN" || "$TOKEN" == "null" ]]; then
            echo "‚ùå √âchec de l'authentification"
            exit 1
          fi
          
          echo "TOKEN=$TOKEN" >> $GITHUB_ENV
          echo "‚úÖ Token r√©cup√©r√© avec succ√®s"

      - name: Ex√©cution des tests avec Mocha
        run: |
          cd api/mocha_test
          npm test
        env:
          JWT_SECRET: ${{ secrets.SECRET_KEY }}
          DB_URI: ${{ secrets.URL_MONGO }}
          TOKEN: ${{ env.TOKEN }}

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest

    steps:
      - name: R√©cup√©ration du code source
        uses: actions/checkout@v3

      - name: D√©ploiement sur le serveur
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            cd api
            git pull origin main
            npm install
            sleep 5
            pm2 restart api
